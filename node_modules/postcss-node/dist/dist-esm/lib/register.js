import { env } from 'process';
import { defaultPostCssNodeExtensions, defaultResponseTimeout, defaultBufferSize } from './options';
import { workerSyncFunction } from './worker-sync-function';
/**
 * Register the css files handle for node.js
 * @public
 * @param extensions - list of extensions, by default '.css', '.scss', '.sass', '.less', '.stylus'
 * @param timeout - the timeout of processing
 * @param bufferSize - the data buffer size
 */
export function register(extensions, timeout, bufferSize) {
    var _a;
    if (extensions === void 0) { extensions = ((_a = env.POSTCSS_NODE_EXT) === null || _a === void 0 ? void 0 : _a.split(',')) || defaultPostCssNodeExtensions; }
    if (timeout === void 0) { timeout = env.POSTCSS_NODE_TIMEOUT ? parseInt(env.POSTCSS_NODE_TIMEOUT) : defaultResponseTimeout; }
    if (bufferSize === void 0) { bufferSize = env.POSTCSS_NODE_BUFFER_SIZE ? parseInt(env.POSTCSS_NODE_BUFFER_SIZE) : defaultBufferSize; }
    var renderCssFile;
    var jsHandle = require.extensions['.js'];
    var cssHandle = (function (module, filename) {
        var orgCompile = module._compile;
        module._compile = function (code, fileName) {
            if (!renderCssFile) {
                renderCssFile = workerSyncFunction(__dirname + '/worker.js', timeout, bufferSize);
            }
            var _a = renderCssFile({ code: code, filename: filename }), css = _a.css, ex = _a.ex;
            /* istanbul ignore else */
            if (css) {
                return orgCompile.call(this, css, fileName);
            }
            else {
                throw ex;
            }
        };
        return jsHandle(module, filename);
    });
    extensions.forEach(function (ext) { return require.extensions[ext] = cssHandle; });
}
//# sourceMappingURL=register.js.map