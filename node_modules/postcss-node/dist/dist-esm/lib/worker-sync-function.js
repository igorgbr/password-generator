var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import v8 from 'v8';
import { workerInit } from './worker-init';
var INT32_BYTES = 4;
var initBufferSize = 64 * 1024;
/**
 * Creates sync function proxy.
 * @internal
 */
export function workerSyncFunction(filename, timeout, bufferSize) {
    var worker;
    var terminateTimeout;
    return function (inputData) {
        if (terminateTimeout) {
            clearTimeout(terminateTimeout);
        }
        if (!worker) {
            var initBuffer = new SharedArrayBuffer(initBufferSize);
            var initSemaphore = new Int32Array(initBuffer);
            worker = workerInit(filename, { sharedBuffer: initBuffer });
            var initResponse = Atomics.wait(initSemaphore, 0, 0, 5000);
            /* istanbul ignore if */
            if (initResponse === 'timed-out') {
                throw 'Worker init timeout';
            }
        }
        var messageBuffer = new SharedArrayBuffer(bufferSize * 1024);
        var messageSemaphore = new Int32Array(messageBuffer);
        worker.postMessage(__assign(__assign({}, inputData), { messageBuffer: messageBuffer }));
        var response = Atomics.wait(messageSemaphore, 0, 0, timeout);
        terminateTimeout = setTimeout(function () {
            /* istanbul ignore else */
            if (worker) {
                worker.terminate();
                worker = undefined;
                terminateTimeout = undefined;
            }
        });
        /* istanbul ignore if */
        if (response === 'timed-out') {
            throw 'Worker timeout';
        }
        var length = messageSemaphore[0];
        return v8.deserialize(Buffer.from(messageBuffer, INT32_BYTES, length));
    };
}
//# sourceMappingURL=worker-sync-function.js.map